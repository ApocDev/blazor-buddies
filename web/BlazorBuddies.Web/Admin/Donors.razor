@*@page "/admin/Donors"*@
@inject DonorService _donorService
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorBuddies.Core.Common
@inject NavigationManager _navManager
@implements IDisposable
@*@attribute [Authorize]*@

<h3>ContactDonor</h3>

<table>
    <thead>
        <tr>
            <th>Selected</th>
            <th>Name</th>
            <th>Phone Number</th>
            <th>Email</th>
            <th>Contacted</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var donor in _donors)
        {
            <tr>
                <td><input type="checkbox" @bind="donor.Selected" /></td>
                <td>@($"{donor.FirstName} {donor.LastName}")</td>
                <td>@donor.PhoneNumber</td>
                <td>@donor.EmailAddress</td>
                @if (donor.ContactSuccessful == true)
                {
                    <td>Message Delivered</td>
                }
                else if (donor.ContactSuccessful == false)
                {
                    <td>Message Failed To Deliver</td>
                }
                else
                {
                    <td />
                }
            </tr>
        }

    </tbody>
</table>

@code {

    private HubConnection _hubConnection;
    private List<DonorModel> _donors = new List<DonorModel>();

    private string _message;

    protected override async Task OnInitializedAsync()
    {
        _donors = (await _donorService.GetDonors()).ToDonorModels().ToList();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navManager.ToAbsoluteUri("/donorHub"))
            .Build();
        _hubConnection.On<DonorModel>("HandleDlr", donor =>
        {
            var donors = _donors.Where(x => x.PhoneNumber == donor.PhoneNumber).ToList();
            donors.ForEach(x => x.ContactSuccessful = donor.ContactSuccessful);
            if (donors.Any())
            {
                StateHasChanged();
            }
        });
        await _hubConnection.StartAsync();
    }

    public async Task GoGoGadgetSendTheSms()
    {
        await _donorService.ContactDonors(_donors.Where(x => x.Selected).Select(x => x.Id).ToList(), _message);
    }

    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}
